import os
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
from datetime import datetime
import streamlit as st

# ------------------ Plot Functions ------------------

def plot_cumulative_returns(
    port_cum: pd.Series,
    bench_cum: pd.Series,
    title: str = "Cumulative Returns",
    return_fig: bool = False
):
    fig, ax = plt.subplots()
    ax.plot(port_cum, label='Portfolio')
    ax.plot(bench_cum, label='Benchmark')
    ax.set_title(title)
    ax.legend()
    ax.set_ylabel('Cumulative Return')
    ax.set_xlabel('Date')
    ax.tick_params(axis='x', labelsize=8)
    plt.tight_layout()
    
    if return_fig:
        return fig
    else:
        plt.show()


def plot_drawdown(drawdowns: pd.Series, title="Portfolio Drawdown", return_fig=False):
    fig, ax = plt.subplots()
    ax.fill_between(drawdowns.index, drawdowns.values, color="red", alpha=0.4)
    ax.set_title(title)
    ax.set_ylabel('Drawdown')
    ax.set_xlabel('Date')
    ax.tick_params(axis='x', labelsize=8)
    plt.tight_layout()

    if return_fig:
        return fig
    else:
        plt.show()


# ------------------ PDF Report Function ------------------

def generate_pdf_report(figures, stats_df=None, output_dir="reports"):
    """
    Generate a PDF report containing:
    - Title page (with date & report title)
    - Provided figures
    - Optional stats table
    """
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    pdf_path = os.path.join(output_dir, f"portfolio_report_{timestamp}.pdf")

    with PdfPages(pdf_path) as pdf:
        # --- Title Page ---
        fig, ax = plt.subplots(figsize=(8.27, 11.69))  # A4 size
        ax.axis("off")
        ax.text(0.5, 0.7, "Portfolio Performance Report",
                transform=ax.transAxes,
                fontsize=24, fontweight="bold", ha="center")
        ax.text(0.5, 0.6, datetime.now().strftime("%B %d, %Y"),
                transform=ax.transAxes,
                fontsize=14, ha="center")
        ax.text(0.5, 0.4, "Generated by Portfolio Tracker",
                transform=ax.transAxes,
                fontsize=12, ha="center", style="italic")
        pdf.savefig(fig, bbox_inches='tight')
        plt.close(fig)

        # --- Figures ---
        for fig in figures:
            pdf.savefig(fig, bbox_inches='tight')

        # --- Stats Table ---
        if stats_df is not None:
            fig, ax = plt.subplots(figsize=(8, len(stats_df) * 0.4 + 1))
            ax.axis('off')
            table = ax.table(
                cellText=stats_df.values,
                colLabels=stats_df.columns,
                rowLabels=stats_df.index,
                cellLoc='center',
                loc='center'
            )
            table.auto_set_font_size(False)
            table.set_fontsize(8)
            pdf.savefig(fig, bbox_inches='tight')
            plt.close(fig)

    return pdf_path


# ------------------ Main App Logic ------------------

def main():
    st.title("Portfolio Tracker with PDF Report Export")

    uploaded_file = st.file_uploader("Upload Portfolio CSV", type=["csv"])
    if uploaded_file is None:
        st.stop()

    df = pd.read_csv(uploaded_file, parse_dates=["Date"], index_col="Date")
    st.write("Uploaded Portfolio Data:", df.head())

    try:
        # Simulated cumulative returns
        cum_port = (1 + df["Portfolio_Returns"]).cumprod()
        cum_bench = (1 + df["Benchmark_Returns"]).cumprod()
    except KeyError as e:
        st.error(f"Missing column in CSV: {e}")
        st.stop()

    # Generate figures
    fig1 = plot_cumulative_returns(cum_port, cum_bench, return_fig=True)
    drawdowns = cum_port / cum_port.cummax() - 1
    fig2 = plot_drawdown(drawdowns, return_fig=True)

    # Display charts
    st.pyplot(fig1)
    st.pyplot(fig2)

    # Create metrics table
    metrics_df = pd.DataFrame({
        "Portfolio": [
            df["Portfolio_Returns"].mean() * 252,
            df["Portfolio_Returns"].std() * (252**0.5),
            drawdowns.min()
        ],
        "Benchmark": [
            df["Benchmark_Returns"].mean() * 252,
            df["Benchmark_Returns"].std() * (252**0.5),
            (cum_bench / cum_bench.cummax() - 1).min()
        ]
    }, index=["Annual Return", "Volatility", "Max Drawdown"])

    st.write("Performance Metrics:", metrics_df)

    # Generate PDF
    pdf_path = generate_pdf_report([fig1, fig2], stats_df=metrics_df)

    with open(pdf_path, "rb") as f:
        st.download_button(
            label="Download PDF Report",
            data=f,
            file_name=os.path.basename(pdf_path),
            mime="application/pdf"
        )


if __name__ == "__main__":
    main()
